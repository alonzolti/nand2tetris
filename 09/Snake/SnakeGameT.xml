<tokens>
<keyword>class</keyword>
<identifier>SnakeGame</identifier>
<symbol>{</symbol>
<keyword>field</keyword>
<identifier>Snake</identifier>
<identifier>snake</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<identifier>SnakeGrid</identifier>
<identifier>grid</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>score</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>level</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>boolean</keyword>
<identifier>paused</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>cycle</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>delay</identifier>
<symbol>;</symbol>
<keyword>constructor</keyword>
<identifier>SnakeGame</identifier>
<identifier>new</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Random</identifier>
<symbol>.</symbol>
<identifier>setSeed</identifier>
<symbol>(</symbol>
<identifier>RandSeed</identifier>
<symbol>.</symbol>
<identifier>getSeed</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>score</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>level</identifier>
<symbol>=</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>paused</identifier>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>cycle</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>delay</identifier>
<symbol>=</symbol>
<integerConstant>100</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>grid</identifier>
<symbol>=</symbol>
<identifier>SnakeGrid</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<keyword>this</keyword>
<symbol>,</symbol>
<integerConstant>512</integerConstant>
<symbol>,</symbol>
<integerConstant>256</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>snake</identifier>
<symbol>=</symbol>
<identifier>Snake</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<keyword>this</keyword>
<symbol>,</symbol>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>sizeX</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>/</symbol>
<integerConstant>2</integerConstant>
<symbol>,</symbol>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>sizeY</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>/</symbol>
<integerConstant>2</integerConstant>
<symbol>,</symbol>
<integerConstant>10</integerConstant>
<symbol>,</symbol>
<integerConstant>3</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>placeFood</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>drawStatus</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<keyword>this</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>deAlloc</identifier>
<symbol>(</symbol>
<keyword>this</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>run</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>boolean</keyword>
<identifier>broken</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>boolean</keyword>
<identifier>exit</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>key</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>exit</identifier>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>exit</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>rememberDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>paused</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>broken</identifier>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>broken</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>key</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>key</identifier>
<symbol>=</symbol>
<identifier>Keyboard</identifier>
<symbol>.</symbol>
<identifier>keyPressed</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>80</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>broken</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>paused</identifier>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>81</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>broken</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>exit</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>drawStatus</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Sys</identifier>
<symbol>.</symbol>
<identifier>wait</identifier>
<symbol>(</symbol>
<identifier>delay</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>let</keyword>
<identifier>key</identifier>
<symbol>=</symbol>
<identifier>Keyboard</identifier>
<symbol>.</symbol>
<identifier>keyPressed</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>80</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>paused</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>81</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>exit</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>130</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<integerConstant>1</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>setDir</identifier>
<symbol>(</symbol>
<integerConstant>3</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<integerConstant>2</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>setDir</identifier>
<symbol>(</symbol>
<integerConstant>3</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>131</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<integerConstant>3</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>setDir</identifier>
<symbol>(</symbol>
<integerConstant>1</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>setDir</identifier>
<symbol>(</symbol>
<integerConstant>1</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>132</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<integerConstant>1</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>setDir</identifier>
<symbol>(</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<integerConstant>2</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>setDir</identifier>
<symbol>(</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key</identifier>
<symbol>=</symbol>
<integerConstant>133</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<integerConstant>3</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>setDir</identifier>
<symbol>(</symbol>
<integerConstant>2</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>setDir</identifier>
<symbol>(</symbol>
<integerConstant>2</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>tryMove</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>drawCrashed</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Sys</identifier>
<symbol>.</symbol>
<identifier>halt</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>checkFood</identifier>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>posX</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>,</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>posY</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>eatFood</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>nextLevel</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>placeFood</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>grow</identifier>
<symbol>(</symbol>
<identifier>cycle</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>drawFood</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>drawStatus</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Sys</identifier>
<symbol>.</symbol>
<identifier>wait</identifier>
<symbol>(</symbol>
<identifier>delay</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>nextCycle</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>checkRewriteHistory</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>cycle</identifier>
<symbol>=</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLength</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>drawDone</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Sys</identifier>
<symbol>.</symbol>
<identifier>halt</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>nextLevel</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>score</identifier>
<symbol>=</symbol>
<identifier>score</identifier>
<symbol>+</symbol>
<symbol>(</symbol>
<integerConstant>10</integerConstant>
<symbol>*</symbol>
<identifier>level</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>level</identifier>
<symbol>=</symbol>
<identifier>level</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>delay</identifier>
<symbol>&gt;</symbol>
<integerConstant>30</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>delay</identifier>
<symbol>=</symbol>
<identifier>delay</identifier>
<symbol>-</symbol>
<integerConstant>5</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>nextCycle</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>cycle</identifier>
<symbol>=</symbol>
<identifier>cycle</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>return</keyword>
<identifier>cycle</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<identifier>SnakeGrid</identifier>
<identifier>getGrid</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>grid</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<identifier>Snake</identifier>
<identifier>getSnake</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>snake</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getCycle</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>cycle</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getScore</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>score</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getLevel</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>level</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getPaused</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>paused</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
</tokens>