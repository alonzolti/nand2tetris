<tokens>
<keyword>class</keyword>
<identifier>SnakeGrid</identifier>
<symbol>{</symbol>
<keyword>field</keyword>
<identifier>SnakeGame</identifier>
<identifier>game</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>sizeX</identifier>
<symbol>,</symbol>
<identifier>sizeY</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>foodX</identifier>
<symbol>,</symbol>
<identifier>foodY</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<identifier>Array</identifier>
<identifier>grid</identifier>
<symbol>;</symbol>
<keyword>constructor</keyword>
<identifier>SnakeGrid</identifier>
<identifier>new</identifier>
<symbol>(</symbol>
<identifier>SnakeGame</identifier>
<identifier>Agame</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Ax</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Ay</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>game</identifier>
<symbol>=</symbol>
<identifier>Agame</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>sizeX</identifier>
<symbol>=</symbol>
<identifier>Ax</identifier>
<symbol>/</symbol>
<integerConstant>4</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>sizeY</identifier>
<symbol>=</symbol>
<symbol>(</symbol>
<identifier>Ay</identifier>
<symbol>-</symbol>
<integerConstant>16</integerConstant>
<symbol>)</symbol>
<symbol>/</symbol>
<integerConstant>4</integerConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>initGrid</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<keyword>this</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>curX</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<identifier>Array</identifier>
<identifier>xGrid</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>curX</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>curX</identifier>
<symbol>&lt;</symbol>
<identifier>sizeX</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>xGrid</identifier>
<symbol>=</symbol>
<identifier>grid</identifier>
<symbol>[</symbol>
<identifier>curX</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>xGrid</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>curX</identifier>
<symbol>=</symbol>
<identifier>curX</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>deAlloc</identifier>
<symbol>(</symbol>
<keyword>this</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>placeFood</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>boolean</keyword>
<identifier>found</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>randX</identifier>
<symbol>,</symbol>
<identifier>randY</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>found</identifier>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>found</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>randX</identifier>
<symbol>=</symbol>
<identifier>Random</identifier>
<symbol>.</symbol>
<identifier>randRange</identifier>
<symbol>(</symbol>
<identifier>sizeX</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>randY</identifier>
<symbol>=</symbol>
<identifier>Random</identifier>
<symbol>.</symbol>
<identifier>randRange</identifier>
<symbol>(</symbol>
<identifier>sizeY</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>checkOccupied</identifier>
<symbol>(</symbol>
<identifier>randX</identifier>
<symbol>,</symbol>
<identifier>randY</identifier>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>found</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>let</keyword>
<identifier>foodX</identifier>
<symbol>=</symbol>
<identifier>randX</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>foodY</identifier>
<symbol>=</symbol>
<identifier>randY</identifier>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>drawFood</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<keyword>true</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawCircle</identifier>
<symbol>(</symbol>
<symbol>(</symbol>
<identifier>foodX</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>2</integerConstant>
<symbol>,</symbol>
<symbol>(</symbol>
<identifier>foodY</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>2</integerConstant>
<symbol>,</symbol>
<integerConstant>2</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>initGrid</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>curX</identifier>
<symbol>,</symbol>
<identifier>curY</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<identifier>Array</identifier>
<identifier>xGrid</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>grid</identifier>
<symbol>=</symbol>
<identifier>Array</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<identifier>sizeX</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>curX</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>curX</identifier>
<symbol>&lt;</symbol>
<identifier>sizeX</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>xGrid</identifier>
<symbol>=</symbol>
<identifier>Array</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<identifier>sizeY</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>curY</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>curY</identifier>
<symbol>&lt;</symbol>
<identifier>sizeY</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>xGrid</identifier>
<symbol>[</symbol>
<identifier>curY</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>curY</identifier>
<symbol>=</symbol>
<identifier>curY</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>let</keyword>
<identifier>grid</identifier>
<symbol>[</symbol>
<identifier>curX</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>xGrid</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>curX</identifier>
<symbol>=</symbol>
<identifier>curX</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<keyword>true</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawLine</identifier>
<symbol>(</symbol>
<integerConstant>0</integerConstant>
<symbol>,</symbol>
<symbol>(</symbol>
<identifier>sizeY</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>,</symbol>
<symbol>(</symbol>
<identifier>sizeX</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>)</symbol>
<symbol>,</symbol>
<symbol>(</symbol>
<identifier>sizeY</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>sizeX</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>sizeX</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>sizeY</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>sizeY</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>foodX</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>foodX</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>foodY</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>foodY</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>setOccupied</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y</identifier>
<symbol>,</symbol>
<keyword>boolean</keyword>
<identifier>occupied</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>Array</identifier>
<identifier>xGrid</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>xGrid</identifier>
<symbol>=</symbol>
<identifier>grid</identifier>
<symbol>[</symbol>
<identifier>x</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>xGrid</identifier>
<symbol>[</symbol>
<identifier>y</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>occupied</identifier>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>boolean</keyword>
<identifier>checkOccupied</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>Array</identifier>
<identifier>xGrid</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>xGrid</identifier>
<symbol>=</symbol>
<identifier>grid</identifier>
<symbol>[</symbol>
<identifier>x</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>xGrid</identifier>
<symbol>[</symbol>
<identifier>y</identifier>
<symbol>]</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>return</keyword>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>boolean</keyword>
<identifier>checkFood</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>x</identifier>
<symbol>=</symbol>
<identifier>foodX</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>y</identifier>
<symbol>=</symbol>
<identifier>foodY</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>debugPosition</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>21</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printInt</identifier>
<symbol>(</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getCycle</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>42</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printInt</identifier>
<symbol>(</symbol>
<identifier>x</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>46</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printInt</identifier>
<symbol>(</symbol>
<identifier>y</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>drawSnakeBit</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<keyword>true</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<identifier>x</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>,</symbol>
<identifier>y</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>,</symbol>
<symbol>(</symbol>
<identifier>x</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>4</integerConstant>
<symbol>,</symbol>
<symbol>(</symbol>
<identifier>y</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>setOccupied</identifier>
<symbol>(</symbol>
<identifier>x</identifier>
<symbol>,</symbol>
<identifier>y</identifier>
<symbol>,</symbol>
<keyword>true</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>clearSnakeBit</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>setColor</identifier>
<symbol>(</symbol>
<keyword>false</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<identifier>x</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>,</symbol>
<identifier>y</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>,</symbol>
<symbol>(</symbol>
<identifier>x</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>4</integerConstant>
<symbol>,</symbol>
<symbol>(</symbol>
<identifier>y</identifier>
<symbol>*</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>setOccupied</identifier>
<symbol>(</symbol>
<identifier>x</identifier>
<symbol>,</symbol>
<identifier>y</identifier>
<symbol>,</symbol>
<keyword>false</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>drawStatus</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>Snake</identifier>
<identifier>snake</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<identifier>String</identifier>
<identifier>tString</identifier>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tString</identifier>
<symbol>=</symbol>
<stringConstant>Level: </stringConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<identifier>tString</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>tString</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printInt</identifier>
<symbol>(</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getLevel</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>25</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tString</identifier>
<symbol>=</symbol>
<stringConstant>Score: </stringConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<identifier>tString</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>tString</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printInt</identifier>
<symbol>(</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getScore</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>52</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tString</identifier>
<symbol>=</symbol>
<stringConstant>Length: </stringConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<identifier>tString</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>tString</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>snake</identifier>
<symbol>=</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getSnake</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printInt</identifier>
<symbol>(</symbol>
<identifier>snake</identifier>
<symbol>.</symbol>
<identifier>getLength</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getPaused</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>drawPaused</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>clearPaused</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>drawPaused</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>String</identifier>
<identifier>tString</identifier>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>12</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tString</identifier>
<symbol>=</symbol>
<stringConstant>[PAUSED] </stringConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<identifier>tString</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>tString</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>clearPaused</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>String</identifier>
<identifier>tString</identifier>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>12</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tString</identifier>
<symbol>=</symbol>
<stringConstant>         </stringConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<identifier>tString</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>tString</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>drawDone</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>String</identifier>
<identifier>tString</identifier>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>12</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tString</identifier>
<symbol>=</symbol>
<stringConstant> [DONE]  </stringConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<identifier>tString</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>tString</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>drawCrashed</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>String</identifier>
<identifier>tString</identifier>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>moveCursor</identifier>
<symbol>(</symbol>
<integerConstant>22</integerConstant>
<symbol>,</symbol>
<integerConstant>12</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tString</identifier>
<symbol>=</symbol>
<stringConstant>*CRASHED*</stringConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<identifier>tString</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>tString</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
</tokens>