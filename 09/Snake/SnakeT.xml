<tokens>
<keyword>class</keyword>
<identifier>Snake</identifier>
<symbol>{</symbol>
<keyword>field</keyword>
<identifier>SnakeGame</identifier>
<identifier>game</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>posX</identifier>
<symbol>,</symbol>
<identifier>posY</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>length</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>growby</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>togrow</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>dir</identifier>
<symbol>,</symbol>
<identifier>lastdir</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<identifier>Array</identifier>
<identifier>histX</identifier>
<symbol>,</symbol>
<identifier>histY</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>histSize</identifier>
<symbol>;</symbol>
<keyword>constructor</keyword>
<identifier>Snake</identifier>
<identifier>new</identifier>
<symbol>(</symbol>
<identifier>SnakeGame</identifier>
<identifier>Agame</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Ax</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Ay</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Alen</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>Agrowby</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>i</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>game</identifier>
<symbol>=</symbol>
<identifier>Agame</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>posX</identifier>
<symbol>=</symbol>
<identifier>Ax</identifier>
<symbol>-</symbol>
<identifier>Alen</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>posY</identifier>
<symbol>=</symbol>
<identifier>Ay</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>length</identifier>
<symbol>=</symbol>
<identifier>Alen</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>growby</identifier>
<symbol>=</symbol>
<identifier>Agrowby</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>togrow</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>dir</identifier>
<symbol>=</symbol>
<integerConstant>4</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>lastdir</identifier>
<symbol>=</symbol>
<integerConstant>4</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>histSize</identifier>
<symbol>=</symbol>
<integerConstant>512</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>histX</identifier>
<symbol>=</symbol>
<identifier>Array</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<identifier>histSize</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>histY</identifier>
<symbol>=</symbol>
<identifier>Array</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<identifier>histSize</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>i</identifier>
<symbol>&lt;</symbol>
<identifier>length</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>posX</identifier>
<symbol>=</symbol>
<identifier>posX</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>drawHead</identifier>
<symbol>(</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getCycle</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<identifier>i</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>nextCycle</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<keyword>this</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>histX</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>histY</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>deAlloc</identifier>
<symbol>(</symbol>
<keyword>this</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>boolean</keyword>
<identifier>checkRewriteHistory</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getCycle</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>=</symbol>
<identifier>histSize</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>rewriteHistory</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>rewriteHistory</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>i</identifier>
<symbol>,</symbol>
<identifier>src</identifier>
<symbol>,</symbol>
<identifier>dst</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<identifier>length</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>dst</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>src</identifier>
<symbol>=</symbol>
<identifier>histSize</identifier>
<symbol>-</symbol>
<identifier>length</identifier>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>i</identifier>
<symbol>&gt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>histX</identifier>
<symbol>[</symbol>
<identifier>dst</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>histX</identifier>
<symbol>[</symbol>
<identifier>src</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>histY</identifier>
<symbol>[</symbol>
<identifier>dst</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>histY</identifier>
<symbol>[</symbol>
<identifier>src</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>src</identifier>
<symbol>=</symbol>
<identifier>src</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>dst</identifier>
<symbol>=</symbol>
<identifier>dst</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<identifier>i</identifier>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>posX</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>posX</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>posY</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>posY</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getLength</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>length</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>dir</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>getLastDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>lastdir</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>setDir</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>newdir</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>dir</identifier>
<symbol>=</symbol>
<identifier>newdir</identifier>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>rememberDir</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>lastdir</identifier>
<symbol>=</symbol>
<identifier>dir</identifier>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>boolean</keyword>
<identifier>tryMove</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>SnakeGrid</identifier>
<identifier>grid</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>grid</identifier>
<symbol>=</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getGrid</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>dir</identifier>
<symbol>=</symbol>
<integerConstant>1</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>posY</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>posY</identifier>
<symbol>=</symbol>
<identifier>posY</identifier>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>dir</identifier>
<symbol>=</symbol>
<integerConstant>2</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>posY</identifier>
<symbol>=</symbol>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>sizeY</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>posY</identifier>
<symbol>=</symbol>
<identifier>posY</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>dir</identifier>
<symbol>=</symbol>
<integerConstant>3</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>posX</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>posX</identifier>
<symbol>=</symbol>
<identifier>posX</identifier>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>dir</identifier>
<symbol>=</symbol>
<integerConstant>4</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>posX</identifier>
<symbol>=</symbol>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>sizeX</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>posX</identifier>
<symbol>=</symbol>
<identifier>posX</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>checkOccupied</identifier>
<symbol>(</symbol>
<identifier>posX</identifier>
<symbol>,</symbol>
<identifier>posY</identifier>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>grow</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>cycle</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>drawHead</identifier>
<symbol>(</symbol>
<identifier>cycle</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>togrow</identifier>
<symbol>&gt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>togrow</identifier>
<symbol>=</symbol>
<identifier>togrow</identifier>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>length</identifier>
<symbol>=</symbol>
<identifier>length</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>clearTail</identifier>
<symbol>(</symbol>
<identifier>cycle</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>drawHead</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>cycle</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>SnakeGrid</identifier>
<identifier>grid</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>grid</identifier>
<symbol>=</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getGrid</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>drawSnakeBit</identifier>
<symbol>(</symbol>
<identifier>posX</identifier>
<symbol>,</symbol>
<identifier>posY</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>histX</identifier>
<symbol>[</symbol>
<identifier>cycle</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>posX</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>histY</identifier>
<symbol>[</symbol>
<identifier>cycle</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>posY</identifier>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>clearTail</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>cycle</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>SnakeGrid</identifier>
<identifier>grid</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>tailIndex</identifier>
<symbol>,</symbol>
<identifier>tailX</identifier>
<symbol>,</symbol>
<identifier>tailY</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tailIndex</identifier>
<symbol>=</symbol>
<identifier>cycle</identifier>
<symbol>-</symbol>
<identifier>length</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tailX</identifier>
<symbol>=</symbol>
<identifier>histX</identifier>
<symbol>[</symbol>
<identifier>tailIndex</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>tailY</identifier>
<symbol>=</symbol>
<identifier>histY</identifier>
<symbol>[</symbol>
<identifier>tailIndex</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>grid</identifier>
<symbol>=</symbol>
<identifier>game</identifier>
<symbol>.</symbol>
<identifier>getGrid</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>grid</identifier>
<symbol>.</symbol>
<identifier>clearSnakeBit</identifier>
<symbol>(</symbol>
<identifier>tailX</identifier>
<symbol>,</symbol>
<identifier>tailY</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>eatFood</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>togrow</identifier>
<symbol>=</symbol>
<identifier>togrow</identifier>
<symbol>+</symbol>
<identifier>growby</identifier>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
</tokens>